{"version":3,"sources":["components/Header.js","components/Footer.js","components/TempSwitch.js","components/Search.js","components/WeatherCondition.js","components/ForecastRow.js","components/WeatherForecast.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","React","Component","Footer","TempSwitch","props","aria-hidden","Search","type","onChange","this","getCityValue","onClick","getWeather","WeatherCondition","weather","city","Math","round","temperature","windSpeed","ForecastRow","day","time","high","low","WeatherForecast","state","forecasts","axios","then","res","data","forecast","slice","setState","map","date","Date","format","key","maxCelsius","minCelsius","API_KEY","App","unit","undefined","e","target","value","a","preventDefault","fetch","api_call","json","console","log","main","temp","name","wind","speed","table","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a7a61839.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <header>\r\n        <img className=\"header__logo\" src=\"./icon/logo.png\" alt=\"logo\" />\r\n        <h1 className=\"header__title\">Weather Channel</h1>\r\n      </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <footer className=\"weather-channel__footer\">\r\n        <p>Powered by React</p>\r\n      </footer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nfunction TempSwitch(props) {\r\n    return (\r\n        <button className=\"temp-switch\">\r\n          <i className=\"fa fa-thermometer-empty\" aria-hidden=\"true\"></i>\r\n          <sup>&deg;</sup>C\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default TempSwitch;","import React from \"react\";\r\nimport TempSwitch from \"./TempSwitch\";\r\n\r\nclass Search extends React.Component {\r\n    render() {\r\n        return (\r\n            <nav>\r\n                <div>\r\n                    <input\r\n                        className=\"search-input\"\r\n                        type=\"text\"\r\n                        onChange={this.props.getCityValue}\r\n                    />\r\n                </div>\r\n                <button className=\"search-btn\" onClick={this.props.getWeather}>\r\n                    <i className=\"fa fa-search\"></i>\r\n                </button>\r\n                <TempSwitch />\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nclass WeatherCondition extends React.Component {\r\n    render() {\r\n        return (\r\n            <section className=\"weather-condition\">\r\n                {typeof this.props.weather !== \"undefined\" &&\r\n                this.props.city !== \"\" ? (\r\n                    <div>\r\n                        <div className=\"weather-condition__location\">\r\n                            {this.props.city}\r\n                        </div>\r\n                        <div className=\"weather-condition__visibility\">\r\n                            {this.props.weather}\r\n                        </div>\r\n                        <div className=\"weather-condition__temp\">\r\n                            {`${Math.round(this.props.temperature)} c`}\r\n                        </div>\r\n                        <div className=\"weather-condition__desc\">\r\n                            <div>\r\n                                <img src=\"icon/icon-umberella.png\" alt=\"umb\" />\r\n                                <span className=\"citem\">20%</span>\r\n                            </div>\r\n                            <div>\r\n                                <img src=\"icon/icon-wind.png\" alt=\"wind\" />{\" \"}\r\n                                <span className=\"citem\">{`${this.props.windSpeed} km/h`}</span>\r\n                            </div>\r\n                            <div>\r\n                                <img\r\n                                    src=\"icon/icon-compass.png\"\r\n                                    alt=\"compass\"\r\n                                />{\" \"}\r\n                                <span className=\"citem\">NE</span>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    \"\"\r\n                )}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherCondition;\r\n","import React from \"react\";\r\n\r\nfunction ForecastRow(props) {\r\n    return (\r\n        <div className=\"weather-forecast__row\">\r\n            <span className=\"weather-forecast__day\">{props.day}</span>\r\n            <span className=\"weather-forecast__icon\">\r\n                <i className=\"fa fa-clock-o\" />\r\n                {props.time}\r\n            </span>\r\n            <span className=\"weather-forecast__high\">{props.high}</span>\r\n            <span className=\"weather-forecast__low\">{props.low}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ForecastRow;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nimport { format } from \"date-fns\";\r\n\r\nimport ForecastRow from \"./ForecastRow\";\r\n\r\nclass WeatherForecast extends React.Component {\r\n    state = {\r\n        forecasts: [],\r\n    };\r\n\r\n    componentDidMount() {\r\n        axios(\r\n            \"https://jr-weather-api.herokuapp.com/api/weather?cc=au&city=brisbane\"\r\n        ).then((res) => {\r\n            //   console.log(res);\r\n            const forecasts = res.data.data.forecast.slice(0, 10);\r\n            this.setState({ forecasts });\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"weather-forecast\">\r\n                <div className=\"forecast__switch\">\r\n                    <button className=\"forecast__switch_0 switch-active\">\r\n                        5 items\r\n                    </button>\r\n                    <button className=\"forecast__switch_1\">10 items</button>\r\n                </div>\r\n                {this.state.forecasts.map((forecast) => {\r\n                    const date = new Date(forecast.time * 1000);\r\n                    const day = format(date, \"EEE\");\r\n                    const time = format(date, \"HH:mm\");\r\n\r\n                    return (\r\n                        <ForecastRow\r\n                            key={forecast.time}\r\n                            day={day}\r\n                            high={forecast.maxCelsius}\r\n                            low={forecast.minCelsius}\r\n                            time={time}\r\n                        />\r\n                    );\r\n                })}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WeatherForecast;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Search from \"./Search\";\nimport WeatherCondition from \"./WeatherCondition\";\nimport WeatherForecast from \"./WeatherForecast\";\n\nconst API_KEY = \"6e41c655f9339921c7ebd5bad96fd981\";\n\nclass App extends React.Component {\n    state = {\n        city: \"\",\n        unit: \"metric\",\n        temperature: undefined,\n        weather: undefined,\n        windSpeed: undefined,\n    };\n\n    getCityValue = (e) => {\n        this.setState({\n            city: e.target.value,\n        });\n    };\n\n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = this.state.city;\n        const unit = this.state.unit;\n        const api_call = await fetch(\n            `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=${unit}`\n        );\n\n        const data = await api_call.json();\n        console.log(data);\n        if (city) {\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                weather: data.weather[0].main,\n                windSpeed: data.wind.speed,\n            });\n\n            console.table(\n                this.state.temperature,\n                this.state.city,\n                this.state.weather\n            );\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"weather-channel__container\">\n                <Header />\n\n                <section>\n                    <Search\n                        getCityValue={this.getCityValue}\n                        getWeather={this.getWeather}\n                    />{\" \"}\n                </section>\n\n                <section>\n                    <WeatherCondition\n                        temperature={this.state.temperature}\n                        city={this.state.city}\n                        weather={this.state.weather}\n                        windSpeed={this.state.windSpeed}\n                    />{\" \"}\n                    <WeatherForecast />\n                </section>\n\n                <Footer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}